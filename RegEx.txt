正则表达式：
1.1、普通字符：
	表达式：re.compile("c"),在匹配字符串"abcde"时，结果为：True,匹配到："c"
	表达式：re.compile("bcd"),在匹配字符串"abcde"时，结果为：True,匹配到："bcd"
1.2、简单的转移字符
	\r -- 回车(本身是正常字符，加了\后，意义改变)
	\n -- 换行
	\f -- 换页
	\t -- 制表符
	\v -- 垂直制表符
	\\ -- "\"（本身为特殊字符，加了\后，变为正常字符）
	\^ -- "^"
	\$ -- "$"
	\. -- "."
	例子："\$d" 匹配字符串 "abc$de" 时，结果为：True,匹配到："$d"
1.3、能够与“多种字符”匹配的表达式：
	\d -- 任意一个数字，0~ 9 中的任意一个
	\D -- 任意一个非数字
	\w -- 任意一个字母或数字或下划线，也就是（A~Z,a~z,0~9,_）中任意一个
	\W -- 任意非
	\s -- 包括空格，制表符，换行符等空白字符中的任意一个
	\S -- 匹配任何非空白字符。
	.  -- 小数点可以匹配除了换行符（\n)以外的任意字符
	例子："\d\d" 匹配字符串"abc123" 结果为：True,匹配到："12"
		"a.\d" 匹配字符"aaa100" 结果为：True，匹配到的内容是："aa1"
		
1.4、自定义可以匹配到“多种字符”的表达式：
	[ab5@] --匹配“a" or "b" or "5" or "@"
	[^abc] --匹配"a", "b","c" 之外的任意一个字符
	[f-k]--  匹配:"f" ~ "k" 之间的任意一个字符
	[^A-F0-3] -- 匹配：“A” ~“F",0~3之外的任意一个字符
	例子： “[bcd][bcd]" 匹配”abc123"时，结果为：True，匹配到："bc"
	[^abc] 匹配"abc123" 时，结果为：True，匹配到："1"
	
1.5 修饰匹配次数的特顺符号：
	{n} --前一个表达式重复n次，例如："\w{2}" -- "\w\w"
	{m,n} -- 至少重复m次，最多重复n次：例如："ba{1,3}" -- "ba"or"baa"or"baaa"
	{m,} --至少m次
	?  -- 匹配表达式0次或者1次，相当于{0，1}
	+  -- 相当于{1，}
	*  -- 相当于{0,}
	例子："\d+\.?\d*" 在匹配"it costs $12.5" 时，
			结果为：True，匹配到："12.5"
		"go{2,8}gle" 匹配："Ads by goooooogle" 
		结果为：True，匹配到："goooooogle"

1.6、特殊字符：
	^ -- 与字符串开始的地方匹配，不匹配任何字符
	$ -- 与字符串结束的地方匹配， 不匹配任何字符
	\b -- 匹配一个单词边界，也就是单词和空格之间的位置，不匹配任何字符
	\B -- 非字边界匹配
	例子： "^aaa" 在匹配 "xxxaaaxxx" 失败
		"aaa$" 在匹配 "xxxaaaxxx" 失败
		".\b."在匹配"@@@abc"时，结果：True，匹配了："@a"
		"\bend\b" 在匹配 "weekend,endfor,end",结果为：True，
			匹配了："end"(最后一个end)
	
	| -- 左右两个表达式之间任选一个
	() -- 1、在被装饰匹配次数时，括号中的表达式可以作为整体被修饰，
		2、取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到
	例子："Tom|Jack" 在匹配："I'm Tom, he is Jack"成功
		"(go\s*)+" 在匹配："Let's go go go!" 匹配到： "go go go"
		"￥(\d+\.?\d*)" 在匹配："$10.9,￥20.5" 匹配到："￥20.5"
		
2.1匹配次数中的贪婪和非贪婪：
	目标格式：:"dxxxdxxxd" 
	贪婪模式： "(d)(\w+)" 或者 "(d)(\w+)(d)" 都是匹配到："dxxxdxxxd"
	非贪婪模式："(d)(\w+?)" 匹配到："dx";
				"(d)(\w+?)(d)" 匹配到："dxxxd"
	例子："<td>(.*)</td> 在匹配："<td><p>aa</p></td><td><p>bb</p></td>"
		时，匹配为“全部匹配”
		"<td>(.*?)</td>" 匹配的结果为："<td><p>aa</p></td>"
		
2.2、反向引用：\1, \2...
	表达式在匹配时，表达式引擎会将小括号“（）”包含的表达式所匹配到的字符串记录下来。在获取匹配结果的时候，小括号包括的表达式所匹配的字符串可以单独获取。“小括号包含的表达式所匹配到的字符串”不仅在匹配结束后可以使用，在匹配过程中也可以使用。表达式后边的部分，可以引用前面“括号内的子匹配已经匹配到的字符串”。引用的方法是“\"加上一个数字。“1\”引用第一对括号内匹配到的字符串，“2\”引用第2对括号内匹配的字符串。如果是多层括号引用，那就由外到里排序。
	例子："('|")(.*?)(\1)"在匹配"'Hello', "world""时，匹配结果是：成功；
		匹配到的内容是："'Hello'".再次匹配下一个时，可以匹配到""world""
		"(\w)\1{4,}"在匹配"aa bbbb abcdefg ccccc 111121111 999999999"时，匹配的结果是成功；匹配到的内容是："ccccc",再次匹配时，可以匹配到"99999999999",
		
2.3、预搜索，不匹配；反向预搜索，不匹配
	上面讲到特殊字符串中"^", "$" , "\b" 等，共同特点是它们本身不匹配任何字符，只是对“字符串的两头”或者“字符串之间的缝隙”附加了一个条件。理解这个概念后，下面是比这更灵活的方法
	1、正向预搜索："(?=xxx)", "(?!xxx)"
	"(?=xxx)"的附加条件是：所在缝隙的右侧，必须能够匹配上xxx这部分的表达式
		，类似"\b"，本身不匹配任何字符
	例子："Windows(?=XP|98)" 在匹配"Windows 98, Windows NT, Window 2000"
		时，将只匹配"Window 98" 中的"Windows"，其他的“windows”字样
		则不被匹配
		"(\w)((?=\1\1\1)(\1))+"在匹配字符串"aaa ffffff 999999999"时，可以
		匹配6个“f“前的4个,可以匹配9个“9”的前面7个
	“(?!xxx)"的附加条件是：所在缝隙的右侧，必须不能匹配xxx这部分表达式。
	例子："((?!\bstop\b).)+"在匹配"fdjka lifdl stop fjdasl fdj"时，
		将从头一直匹配到“stop”之前的位置，如果字符串没有“stop”，
		则匹配整个字符串
		"do(?!\w)"在匹配字符串"done,do,dog"时，只能匹配"do",其中
			"(?!\w)"和使用"\b"效果一样。
	2、反向预搜索："(?<=xxx)", "(?<!xxx)"
		这两种格式的概念和正向预搜索是刚好相反：判断所在缝隙的“左侧”
			是否符合条件
		例子："(?<=\d(4})\d+(?=\d{4})" 在匹配“123124334245”时，将匹配除了
			前面4位数字和后面4位数字之间的数字。

3、其它通用规则：
	\xXXX -- 编号在0~255范围的字符，（X表示16进制数）
	\uXXX -- 任何字符可以使用"u"再加上其编号的4位16进制数表示
	




















	